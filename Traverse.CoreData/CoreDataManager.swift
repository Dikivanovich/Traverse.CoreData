import Foundationimport CoreDataclass CoreDataManager {    //    Singleton        static let instance = CoreDataManager()       private init() {}        // MARK: - Core Data stack        lazy var persistentContainer: NSPersistentContainer = {        /*         The persistent container for the application. This implementation         creates and returns a container, having loaded the store for the         application to it. This property is optional since there are legitimate         error conditions that could cause the creation of the store to fail.         */        let container = NSPersistentContainer(name: "Traverse_CoreData")        container.loadPersistentStores(completionHandler: { (storeDescription, error) in            if let error = error as NSError? {                // Replace this implementation with code to handle the error appropriately.                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.                                /*                 Typical reasons for an error here include:                 * The parent directory does not exist, cannot be created, or disallows writing.                 * The persistent store is not accessible, due to permissions or data protection when the device is locked.                 * The device is out of space.                 * The store could not be migrated to the current model version.                 Check the error message to determine what the actual problem was.                 */                fatalError("Unresolved error \(error), \(error.userInfo)")            }        })        return container    }()        // MARK: - Core Data Saving support       func saveContext () {        let context = self.persistentContainer.viewContext        if context.hasChanges {            do {                try context.save()            } catch {                // Replace this implementation with code to handle the error appropriately.                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.                let nserror = error as NSError                fatalError("Unresolved error \(nserror), \(nserror.userInfo)")            }        }    }    func entityForNAme(entityName: String) -> NSEntityDescription {        return NSEntityDescription.entity(forEntityName: entityName, in: CoreDataManager.instance.persistentContainer.viewContext)!    }        func addNewStation(name nameStation: String, date dateInitStation: String) {            let managedObject = NSEntityDescription.insertNewObject(forEntityName: "Station", into: CoreDataManager.instance.persistentContainer.viewContext) as! Station        managedObject.nameStation = nameStation    managedObject.dateInitStation = dateInitStation    CoreDataManager.instance.saveContext()       print("Станция добавлена, теперь список станций такой:")                let fetchRequest = NSFetchRequest<Station>(entityName: "Station")            do {          let results = try CoreDataManager.instance.persistentContainer.viewContext.fetch(fetchRequest)        for result in results as [Station] {        print(result.nameStation ?? "")        }                }                         catch  {                    print(error)                }                }        func fetchedResultsController(entityName: String, sortBy: String) -> NSFetchedResultsController<NSFetchRequestResult> {        let fetchRequest: NSFetchRequest<Station> = Station.fetchRequest()        let sortDescriptor = NSSortDescriptor(key: "nameStation", ascending: true)        fetchRequest.sortDescriptors = [sortDescriptor]        let fetchedResultsController = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: CoreDataManager.instance.persistentContainer.viewContext, sectionNameKeyPath: nil, cacheName: nil)        return fetchedResultsController as! NSFetchedResultsController<NSFetchRequestResult>    }    }